#include <string>
#include "base/CommandLineParser.h"
#include "base/FileParser.h"
#include "visual/Waves.h"



int main( int argc, char** argv )
{

  /* commandArg<string> fileCmmd("-i","input file");
  commandArg<int> bCmmd("-from","from column");
  commandArg<int> eCmmd("-to","to column");
  commandArg<bool> nCmmd("-newline","add newline", false);
  commandLineParser P(argc,argv);
  P.SetDescription("Testing the file parser.");
  P.registerArg(fileCmmd);
  P.registerArg(bCmmd);
  P.registerArg(eCmmd);
  P.registerArg(nCmmd);
 
  P.parse();
  
  string fileName = P.GetStringValueFor(fileCmmd);
  int from = P.GetIntValueFor(bCmmd);
  int to = P.GetIntValueFor(eCmmd);
  bool bN = P.GetBoolValueFor(nCmmd);*/

  SingleWaveForm s;

  int i;

  //for (double v = -50.; v<=50.; v += 1.) {
  //cout << v << " " << s.Value(Coords2D(v, 0.), 20.) << endl;
  //}

  s.SetSource(Coords2D(512+256, 256+128));

  Canvas c, c2;
  c.resize(512*3, 256*3);
  c.PaintAll(0.5, 0.5, 0.5, 0.5);


  WavePainter painter;
  painter.Paint(c, s, 400);
  SparseCanvas sparse;
  sparse.FromCanvas(c, 0.49, 0.51);
 
  // ======================================
  c2.resize(512, 256);
  c2.PaintAll(0.5, 0.5, 0.5, 0.5);
  sparse.AddToCanvas(c2, 512, 256, 0.5, true);


  c2.GreyScale();

  Bitmap out;
  c2.ToBitmap(out);
  out.Write("wave2.bmp");


  // Test the repo

  WaveRepo repo;
  repo.SetSize(512*3, 256*3);
  SingleWaveForm s2;

  /*
  s2.SetSource(Coords2D(repo.X()/2, repo.Y()/2));
  cout << "Building repo..." << endl;
  for (double time=1; time<256*2; time += 1.5) {
    cout << "Add " << time << " of " << 256*3 << endl;
    repo.AddWave(s2, time);
  }
  cout << "Write repo." << endl;
  repo.Write("data/wave.repo");
  cout << "Done." << endl;
  */
  repo.Read("data/wave.repo");

  int k = 0;
  for (i=1000; i<1200; i++) {
    char name[512];
    sprintf(name, "data/single%d.bmp", i);

    Canvas cc;
    cc.resize(512, 256);
    cc.PaintAll(0.5, 0.5, 0.5, 0.5);

    if (k >= repo.isize())
      break;
    repo.AddToCanvas(cc, 512/2, 256/2, k);
    k++;

    cc.GreyScale();

    Bitmap out_single;
    cc.ToBitmap(out_single);
    out_single.Write(name);
    cout << "Wrote " << name << endl;

  }
  


  return 0;
}
